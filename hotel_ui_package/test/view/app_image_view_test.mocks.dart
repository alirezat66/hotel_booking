// Mocks generated by Mockito 5.4.4 from annotations
// in hotel_ui_package/test/view/app_image_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:cached_network_image/src/image_provider/cached_network_image_provider.dart'
    as _i2;
import 'package:cached_network_image_platform_interface/cached_network_image_platform_interface.dart'
    as _i6;
import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/material.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCachedNetworkImageProvider_0 extends _i1.SmartFake
    implements _i2.CachedNetworkImageProvider {
  _FakeCachedNetworkImageProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageStreamCompleter_1 extends _i1.SmartFake
    implements _i3.ImageStreamCompleter {
  _FakeImageStreamCompleter_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeImageStream_2 extends _i1.SmartFake implements _i3.ImageStream {
  _FakeImageStream_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [CachedNetworkImageProvider].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCachedNetworkImageProvider extends _i1.Mock
    implements _i2.CachedNetworkImageProvider {
  MockCachedNetworkImageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#url),
        ),
      ) as String);

  @override
  double get scale => (super.noSuchMethod(
        Invocation.getter(#scale),
        returnValue: 0.0,
      ) as double);

  @override
  _i6.ImageRenderMethodForWeb get imageRenderMethodForWeb =>
      (super.noSuchMethod(
        Invocation.getter(#imageRenderMethodForWeb),
        returnValue: _i6.ImageRenderMethodForWeb.HtmlImage,
      ) as _i6.ImageRenderMethodForWeb);

  @override
  _i7.Future<_i2.CachedNetworkImageProvider> obtainKey(
          _i3.ImageConfiguration? configuration) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtainKey,
          [configuration],
        ),
        returnValue: _i7.Future<_i2.CachedNetworkImageProvider>.value(
            _FakeCachedNetworkImageProvider_0(
          this,
          Invocation.method(
            #obtainKey,
            [configuration],
          ),
        )),
      ) as _i7.Future<_i2.CachedNetworkImageProvider>);

  @override
  _i3.ImageStreamCompleter loadBuffer(
    _i2.CachedNetworkImageProvider? key,
    _i3.DecoderBufferCallback? decode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadBuffer,
          [
            key,
            decode,
          ],
        ),
        returnValue: _FakeImageStreamCompleter_1(
          this,
          Invocation.method(
            #loadBuffer,
            [
              key,
              decode,
            ],
          ),
        ),
      ) as _i3.ImageStreamCompleter);

  @override
  _i3.ImageStreamCompleter loadImage(
    _i2.CachedNetworkImageProvider? key,
    _i3.ImageDecoderCallback? decode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadImage,
          [
            key,
            decode,
          ],
        ),
        returnValue: _FakeImageStreamCompleter_1(
          this,
          Invocation.method(
            #loadImage,
            [
              key,
              decode,
            ],
          ),
        ),
      ) as _i3.ImageStreamCompleter);

  @override
  _i3.ImageStream resolve(_i3.ImageConfiguration? configuration) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolve,
          [configuration],
        ),
        returnValue: _FakeImageStream_2(
          this,
          Invocation.method(
            #resolve,
            [configuration],
          ),
        ),
      ) as _i3.ImageStream);

  @override
  _i3.ImageStream createStream(_i3.ImageConfiguration? configuration) =>
      (super.noSuchMethod(
        Invocation.method(
          #createStream,
          [configuration],
        ),
        returnValue: _FakeImageStream_2(
          this,
          Invocation.method(
            #createStream,
            [configuration],
          ),
        ),
      ) as _i3.ImageStream);

  @override
  _i7.Future<_i3.ImageCacheStatus?> obtainCacheStatus({
    required _i3.ImageConfiguration? configuration,
    _i3.ImageErrorListener? handleError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtainCacheStatus,
          [],
          {
            #configuration: configuration,
            #handleError: handleError,
          },
        ),
        returnValue: _i7.Future<_i3.ImageCacheStatus?>.value(),
      ) as _i7.Future<_i3.ImageCacheStatus?>);

  @override
  void resolveStreamForKey(
    _i3.ImageConfiguration? configuration,
    _i3.ImageStream? stream,
    _i2.CachedNetworkImageProvider? key,
    _i3.ImageErrorListener? handleError,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #resolveStreamForKey,
          [
            configuration,
            stream,
            key,
            handleError,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<bool> evict({
    _i3.ImageCache? cache,
    _i3.ImageConfiguration? configuration = _i3.ImageConfiguration.empty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #evict,
          [],
          {
            #cache: cache,
            #configuration: configuration,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}
