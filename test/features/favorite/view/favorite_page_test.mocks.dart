// Mocks generated by Mockito 5.4.4 from annotations
// in hotel_booking/test/features/favorite/view/favorite_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:hotel_booking/core/data/repository/favorite_repository.dart'
    as _i2;
import 'package:hotel_booking/features/favorite/presentation/cubit/favorite_cubit.dart'
    as _i3;
import 'package:hotel_booking/features/favorite/data/model/hotel_favorite.dart'
    as _i4;
import 'package:hotel_booking/features/hotels/data/models/hotel_model.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFavoriteRepository_0 extends _i1.SmartFake
    implements _i2.FavoriteRepository {
  _FakeFavoriteRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FavoriteCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteCubit extends _i1.Mock implements _i3.FavoriteCubit {
  @override
  _i2.FavoriteRepository get favoriteRepository => (super.noSuchMethod(
        Invocation.getter(#favoriteRepository),
        returnValue: _FakeFavoriteRepository_0(
          this,
          Invocation.getter(#favoriteRepository),
        ),
        returnValueForMissingStub: _FakeFavoriteRepository_0(
          this,
          Invocation.getter(#favoriteRepository),
        ),
      ) as _i2.FavoriteRepository);

  @override
  List<_i4.HotelFavorite> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <_i4.HotelFavorite>[],
        returnValueForMissingStub: <_i4.HotelFavorite>[],
      ) as List<_i4.HotelFavorite>);

  @override
  _i5.Stream<List<_i4.HotelFavorite>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<List<_i4.HotelFavorite>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i4.HotelFavorite>>.empty(),
      ) as _i5.Stream<List<_i4.HotelFavorite>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void addFavorite(_i6.HotelModel? hotel) => super.noSuchMethod(
        Invocation.method(
          #addFavorite,
          [hotel],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFavorite(String? hotelId) => super.noSuchMethod(
        Invocation.method(
          #removeFavorite,
          [hotelId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void emit(List<_i4.HotelFavorite>? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<List<_i4.HotelFavorite>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FavoriteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteRepository extends _i1.Mock
    implements _i2.FavoriteRepository {
  @override
  _i5.Future<void> addFavorite(_i6.HotelModel? hotel) => (super.noSuchMethod(
        Invocation.method(
          #addFavorite,
          [hotel],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> removeFavorite(String? hotelId) => (super.noSuchMethod(
        Invocation.method(
          #removeFavorite,
          [hotelId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  List<_i4.HotelFavorite> getFavorites() => (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [],
        ),
        returnValue: <_i4.HotelFavorite>[],
        returnValueForMissingStub: <_i4.HotelFavorite>[],
      ) as List<_i4.HotelFavorite>);

  @override
  _i5.Stream<List<_i4.HotelFavorite>> watchFavorites() => (super.noSuchMethod(
        Invocation.method(
          #watchFavorites,
          [],
        ),
        returnValue: _i5.Stream<List<_i4.HotelFavorite>>.empty(),
        returnValueForMissingStub: _i5.Stream<List<_i4.HotelFavorite>>.empty(),
      ) as _i5.Stream<List<_i4.HotelFavorite>>);
}
