// Mocks generated by Mockito 5.4.4 from annotations
// in hotel_booking/test/features/favorite/domain/usecase/remove_favorite_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:hotel_booking/features/favorite/data/model/hotel_favorite.dart'
    as _i5;
import 'package:hotel_booking/features/favorite/domain/repository/favorite_repository.dart'
    as _i2;
import 'package:hotel_booking/features/hotels/data/models/hotel_model.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FavoriteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteRepository extends _i1.Mock
    implements _i2.FavoriteRepository {
  @override
  _i3.Future<void> addFavorite(_i4.HotelModel? hotel) => (super.noSuchMethod(
        Invocation.method(
          #addFavorite,
          [hotel],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeFavorite(String? id) => (super.noSuchMethod(
        Invocation.method(
          #removeFavorite,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<_i5.HotelFavorite> getFavorites() => (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [],
        ),
        returnValue: <_i5.HotelFavorite>[],
        returnValueForMissingStub: <_i5.HotelFavorite>[],
      ) as List<_i5.HotelFavorite>);

  @override
  _i3.Stream<List<_i5.HotelFavorite>> watchFavorites() => (super.noSuchMethod(
        Invocation.method(
          #watchFavorites,
          [],
        ),
        returnValue: _i3.Stream<List<_i5.HotelFavorite>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<_i5.HotelFavorite>>.empty(),
      ) as _i3.Stream<List<_i5.HotelFavorite>>);
}
