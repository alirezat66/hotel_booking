// Mocks generated by Mockito 5.4.4 from annotations
// in hotel_booking/test/features/favorite/presentation/cubit/favorite_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hotel_booking/features/favorite/data/model/hotel_favorite.dart'
    as _i8;
import 'package:hotel_booking/features/favorite/domain/repository/favorite_repository.dart'
    as _i2;
import 'package:hotel_booking/features/favorite/domain/usecase/add_favorite_use_case.dart'
    as _i3;
import 'package:hotel_booking/features/favorite/domain/usecase/get_favorites_use_case.dart'
    as _i7;
import 'package:hotel_booking/features/favorite/domain/usecase/remove_favorite_use_case.dart'
    as _i6;
import 'package:hotel_booking/features/favorite/domain/usecase/watch_use_case.dart'
    as _i9;
import 'package:hotel_booking/features/hotels/data/models/hotel_model.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFavoriteRepository_0 extends _i1.SmartFake
    implements _i2.FavoriteRepository {
  _FakeFavoriteRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddFavoriteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddFavoriteUseCase extends _i1.Mock
    implements _i3.AddFavoriteUseCase {
  MockAddFavoriteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FavoriteRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeFavoriteRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.FavoriteRepository);

  @override
  _i4.Future<void> call(_i5.HotelModel? hotel) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [hotel],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [RemoveFavoriteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveFavoriteUseCase extends _i1.Mock
    implements _i6.RemoveFavoriteUseCase {
  MockRemoveFavoriteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FavoriteRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeFavoriteRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.FavoriteRepository);

  @override
  _i4.Future<void> call(String? hotelId) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [hotelId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [GetFavoriteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavoriteUseCase extends _i1.Mock
    implements _i7.GetFavoriteUseCase {
  MockGetFavoriteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FavoriteRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeFavoriteRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.FavoriteRepository);

  @override
  List<_i8.HotelFavorite> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: <_i8.HotelFavorite>[],
      ) as List<_i8.HotelFavorite>);
}

/// A class which mocks [WatchFavoriteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchFavoriteUseCase extends _i1.Mock
    implements _i9.WatchFavoriteUseCase {
  MockWatchFavoriteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FavoriteRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeFavoriteRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.FavoriteRepository);

  @override
  _i4.Stream<List<_i8.HotelFavorite>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Stream<List<_i8.HotelFavorite>>.empty(),
      ) as _i4.Stream<List<_i8.HotelFavorite>>);
}
