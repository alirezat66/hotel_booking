// Mocks generated by Mockito 5.4.4 from annotations
// in hotel_booking/test/features/favorite/presentation/view/favorite_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:hotel_booking/features/favorite/data/model/hotel_favorite.dart'
    as _i7;
import 'package:hotel_booking/features/favorite/domain/usecase/add_favorite_use_case.dart'
    as _i2;
import 'package:hotel_booking/features/favorite/domain/usecase/get_favorites_use_case.dart'
    as _i4;
import 'package:hotel_booking/features/favorite/domain/usecase/remove_favorite_use_case.dart'
    as _i3;
import 'package:hotel_booking/features/favorite/domain/usecase/watch_use_case.dart'
    as _i5;
import 'package:hotel_booking/features/favorite/presentation/cubit/favorite_cubit.dart'
    as _i6;
import 'package:hotel_booking/features/hotels/data/models/hotel_model.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAddFavoriteUseCase_0 extends _i1.SmartFake
    implements _i2.AddFavoriteUseCase {
  _FakeAddFavoriteUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveFavoriteUseCase_1 extends _i1.SmartFake
    implements _i3.RemoveFavoriteUseCase {
  _FakeRemoveFavoriteUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetFavoriteUseCase_2 extends _i1.SmartFake
    implements _i4.GetFavoriteUseCase {
  _FakeGetFavoriteUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWatchFavoriteUseCase_3 extends _i1.SmartFake
    implements _i5.WatchFavoriteUseCase {
  _FakeWatchFavoriteUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FavoriteCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteCubit extends _i1.Mock implements _i6.FavoriteCubit {
  @override
  _i2.AddFavoriteUseCase get addFavoriteUseCase => (super.noSuchMethod(
        Invocation.getter(#addFavoriteUseCase),
        returnValue: _FakeAddFavoriteUseCase_0(
          this,
          Invocation.getter(#addFavoriteUseCase),
        ),
        returnValueForMissingStub: _FakeAddFavoriteUseCase_0(
          this,
          Invocation.getter(#addFavoriteUseCase),
        ),
      ) as _i2.AddFavoriteUseCase);

  @override
  _i3.RemoveFavoriteUseCase get removeFavoriteUseCase => (super.noSuchMethod(
        Invocation.getter(#removeFavoriteUseCase),
        returnValue: _FakeRemoveFavoriteUseCase_1(
          this,
          Invocation.getter(#removeFavoriteUseCase),
        ),
        returnValueForMissingStub: _FakeRemoveFavoriteUseCase_1(
          this,
          Invocation.getter(#removeFavoriteUseCase),
        ),
      ) as _i3.RemoveFavoriteUseCase);

  @override
  _i4.GetFavoriteUseCase get getFavoriteUseCase => (super.noSuchMethod(
        Invocation.getter(#getFavoriteUseCase),
        returnValue: _FakeGetFavoriteUseCase_2(
          this,
          Invocation.getter(#getFavoriteUseCase),
        ),
        returnValueForMissingStub: _FakeGetFavoriteUseCase_2(
          this,
          Invocation.getter(#getFavoriteUseCase),
        ),
      ) as _i4.GetFavoriteUseCase);

  @override
  _i5.WatchFavoriteUseCase get watchFavoriteUseCase => (super.noSuchMethod(
        Invocation.getter(#watchFavoriteUseCase),
        returnValue: _FakeWatchFavoriteUseCase_3(
          this,
          Invocation.getter(#watchFavoriteUseCase),
        ),
        returnValueForMissingStub: _FakeWatchFavoriteUseCase_3(
          this,
          Invocation.getter(#watchFavoriteUseCase),
        ),
      ) as _i5.WatchFavoriteUseCase);

  @override
  List<_i7.HotelFavorite> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <_i7.HotelFavorite>[],
        returnValueForMissingStub: <_i7.HotelFavorite>[],
      ) as List<_i7.HotelFavorite>);

  @override
  _i8.Stream<List<_i7.HotelFavorite>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<List<_i7.HotelFavorite>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i7.HotelFavorite>>.empty(),
      ) as _i8.Stream<List<_i7.HotelFavorite>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void addFavorite(_i9.HotelModel? hotel) => super.noSuchMethod(
        Invocation.method(
          #addFavorite,
          [hotel],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFavorite(String? hotelId) => super.noSuchMethod(
        Invocation.method(
          #removeFavorite,
          [hotelId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void emit(List<_i7.HotelFavorite>? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i10.Change<List<_i7.HotelFavorite>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
